## Helpful docs

https://lldb.llvm.org/lldb-gdb.html
https://lldb.llvm.org/tutorial.html
https://www.objc.io/issues/19-debugging/lldb-debugging/

## Useful lldb commands

Compile with -g for debug info:
  gcc -g -o my-grep my-grep.c

Set executable in lldb:
  lldb ./my-grep

Pass parameters to the command:
  lldb -- ./my-grep a b.txt c.txt

Pass input file to stdin, equivalent to ./my-grep a <test:
  lldb -- ./my-grep a
  (lldb) process launch -i test

Breakpoints:
  b main
  b go
  b my-grep.c:48
  br list

Current position in the source file (i.e. frame):
  f  -- for 'frame'

Navigation:
  n -- next for 'step over', next line basically
  c -- for continue
  s -- for 'step in'
  finish -- for 'step out' (continues until next `return` from a function)
  thread return <RET_VALUE> -- exit immediately with optional return value

Show all local vars and arguments:
  fr v

Print variable:
  (lldb) p *buffer
  (char *) $0 = 0x0000000100500000 "ac\n"

Print variable as array (i.e. if you want all buffer, not just until null byte):

 (lldb) parray 4 *buffer
 (char *) $1 = 0x0000000100500000 "ac\n" {
   (char) [0] = 'a'
   (char) [1] = 'c'
   (char) [2] = '\n'
   (char) [3] = '\0'
 }

 Also, even with more control (to print all 32-elements unsigned char array like this):

 > type summary add -s "${var[0-31]}" "unsigned char [32]"
 > expr -f bytes -- ctx->final
     (unsigned char [32]) $27 = [00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00]

 Or even just:
 > type summary add -s "${var[]}" "unsigned char [32]"

 (empty square brackets after `var` work, because we know the size of
 array, but won't work for pointers).

 To clear summaries:
    type summary clear

 Information about formats, summary string, etc.:
   https://lldb.llvm.org/varformats.html

 Also see discussion and various solutions (some of them outdated) here:
   https://stackoverflow.com/questions/7062173/view-array-in-lldb-equivalent-of-gdbs-operator-in-xcode-4-1/7138219

If that variable is an array defined as `char arr[10]` and you want to
see it as 10 character array and not a string, you have to cast it to
pointer explicitly, otherwise lldb will complain:

  parray 10 (char*) arr

  Or use summary string as described before.

Print something as hex:
  p/x

Print something as binary:
  p/t

Backtrace (stacktrace):
  bt

Frame info (for all parameters):
  frame info

Check if there is debug information about symbols:

  image lookup -vn <function_name>
  See also here: https://lldb.llvm.org/troubleshooting.html

Change default amount of context for printing source code with `f`:

  settings set stop-line-count-before 5
  settings set stop-line-count-after 5

List source:

  source list
  l

  `l` has a clever syntax based on regexp argument.

To add command aliases:

  Example:
  command alias bfl breakpoint set -f %1 -l %2


To always show some variables (on every stop):

  display some_expr
